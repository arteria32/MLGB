{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Урок 2. Масштабирование признаков. Регуляризация. Стохастический градиентный спуск."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_u5bV-OlT34p"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn import datasets\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_n6il-AZaLuA"
   },
   "outputs": [],
   "source": [
    "X = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n",
    "              [1, 1, 2, 5, 3, 0, 5, 10, 1, 2],\n",
    "              [500, 700, 750, 600, 1450, 800, 1500, 2000, 450, 1000],\n",
    "              [1, 1, 2, 1, 2, 1, 3, 3, 1, 2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "x8yoci01ni-t"
   },
   "outputs": [],
   "source": [
    "y = [45, 55, 50, 55, 60, 35, 75, 80, 50, 60]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Нормализация [0, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "Ei5qeZO_aT6m",
    "outputId": "087819d3-202a-46c9-f87d-49e17953099c",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 10)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[1].min(), X[1].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "L7wsW1Q7b4Ts",
    "outputId": "911044d6-32c1-475a-80cd-cbaf26d5ba32"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(450, 2000)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[2].min(), X[2].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 121
    },
    "colab_type": "code",
    "id": "E55S9Bzob9Xa",
    "outputId": "4abf56a2-d484-4c24-8520-8ed1b58ccca8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00,\n",
       "        1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00],\n",
       "       [1.00e+00, 1.00e+00, 2.00e+00, 5.00e+00, 3.00e+00, 0.00e+00,\n",
       "        5.00e+00, 1.00e+01, 1.00e+00, 2.00e+00],\n",
       "       [5.00e+02, 7.00e+02, 7.50e+02, 6.00e+02, 1.45e+03, 8.00e+02,\n",
       "        1.50e+03, 2.00e+03, 4.50e+02, 1.00e+03],\n",
       "       [1.00e+00, 1.00e+00, 2.00e+00, 1.00e+00, 2.00e+00, 1.00e+00,\n",
       "        3.00e+00, 3.00e+00, 1.00e+00, 2.00e+00]])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_norm = X.copy()\n",
    "X_norm = X_norm.astype(np.float64)\n",
    "X_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 121
    },
    "colab_type": "code",
    "id": "7x-6IuPOcIo0",
    "outputId": "1668fec7-37ae-4671-ad9f-f093c30a6c72"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00,\n",
       "        1.00e+00, 1.00e+00, 1.00e+00, 1.00e+00],\n",
       "       [1.00e-01, 1.00e-01, 2.00e-01, 5.00e-01, 3.00e-01, 0.00e+00,\n",
       "        5.00e-01, 1.00e+00, 1.00e-01, 2.00e-01],\n",
       "       [5.00e+02, 7.00e+02, 7.50e+02, 6.00e+02, 1.45e+03, 8.00e+02,\n",
       "        1.50e+03, 2.00e+03, 4.50e+02, 1.00e+03],\n",
       "       [1.00e+00, 1.00e+00, 2.00e+00, 1.00e+00, 2.00e+00, 1.00e+00,\n",
       "        3.00e+00, 3.00e+00, 1.00e+00, 2.00e+00]])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_norm[1] = (X[1] - X[1].min()) / (X[1].max() - X[1].min())\n",
    "X_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 121
    },
    "colab_type": "code",
    "id": "izkMRdXFcjyK",
    "outputId": "982b8c8d-629d-4c4a-a3d5-67854cee4a4a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 1.        , 1.        , 1.        , 1.        ,\n",
       "        1.        , 1.        , 1.        , 1.        , 1.        ],\n",
       "       [0.1       , 0.1       , 0.2       , 0.5       , 0.3       ,\n",
       "        0.        , 0.5       , 1.        , 0.1       , 0.2       ],\n",
       "       [0.03225806, 0.16129032, 0.19354839, 0.09677419, 0.64516129,\n",
       "        0.22580645, 0.67741935, 1.        , 0.        , 0.35483871],\n",
       "       [1.        , 1.        , 2.        , 1.        , 2.        ,\n",
       "        1.        , 3.        , 3.        , 1.        , 2.        ]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_norm[2] = (X[2] - X[2].min()) / (X[2].max() - X[2].min())\n",
    "X_norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Zy63bpFfeqzu"
   },
   "source": [
    "Стандартизация"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 317
    },
    "colab_type": "code",
    "id": "8i9pB-3-fMD4",
    "outputId": "3cbe76f6-d000-4fcd-fe86-ffe853403356"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(X[1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 335
    },
    "colab_type": "code",
    "id": "-bnAYQqVfRX-",
    "outputId": "d59b0013-49bc-40fa-cb29-e71403e6e9e0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAQPUlEQVR4nO3cfaxkdX3H8fdHdvHZrnavhe4DS1tsok0U3K5QbUvRtjzF7R/+galCaZuNRBux9gE1wfgfaGMbxLDZCFUqhVildKNL1FqtmhRwdwsLy0pdFeXKWlaNCxSjbvvtH3OQ6fXeO3Pvzp0Zfn2/ksk9D78582F25sOZM+dMqgpJ0pPfUyYdQJI0Gha6JDXCQpekRljoktQIC12SGrFqUg+8du3a2rRp06QeXpKelPbs2fOdqpqZb93ECn3Tpk3s3r17Ug8vSU9KSb6x0DoPuUhSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGDCz0JE9LckeSu5LsT/KuecYkyVVJDibZl+S0lYkrSVrIMOeh/xA4q6oeTbIa+GKSW6vqtr4x5wCndLeXAdd0fyVJYzJwD716Hu1mV3e3uT+ivhW4vht7G7AmyYmjjSpJWsxQV4omOQ7YA/wS8P6qun3OkHXAA33zs92yQ3O2sw3YBrBx48ZlRoZNl31i2fc9Vvdfcd7EHluSFjPUl6JV9d9V9RJgPbAlya/MGZL57jbPdnZU1eaq2jwzM+9PEUiSlmlJZ7lU1feBzwFnz1k1C2zom18PPHhMySRJSzLMWS4zSdZ0008HXgV8ec6wncCF3dkupwNHquoQkqSxGeYY+onAh7rj6E8BPlJVH0/yBoCq2g7sAs4FDgKPARevUF5J0gIGFnpV7QNOnWf59r7pAt442miSpKXwSlFJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJasTAQk+yIclnkxxIsj/Jm+cZc2aSI0nu7G6Xr0xcSdJCVg0x5ijw1qram+TZwJ4kn66qe+eM+0JVnT/6iJKkYQzcQ6+qQ1W1t5t+BDgArFvpYJKkpVnSMfQkm4BTgdvnWX1GkruS3JrkRQvcf1uS3Ul2Hz58eMlhJUkLG7rQkzwL+BhwaVU9PGf1XuCkqnox8D7glvm2UVU7qmpzVW2emZlZbmZJ0jyGKvQkq+mV+Q1VdfPc9VX1cFU92k3vAlYnWTvSpJKkRQ1zlkuAa4EDVfXeBcac0I0jyZZuu98dZVBJ0uKGOcvl5cDrgbuT3NktezuwEaCqtgOvAS5JchT4AXBBVdUK5JUkLWBgoVfVF4EMGHM1cPWoQkmSls4rRSWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDViYKEn2ZDks0kOJNmf5M3zjEmSq5IcTLIvyWkrE1eStJBVQ4w5Cry1qvYmeTawJ8mnq+revjHnAKd0t5cB13R/JUljMnAPvaoOVdXebvoR4ACwbs6wrcD11XMbsCbJiSNPK0la0DB76D+RZBNwKnD7nFXrgAf65me7ZYfm3H8bsA1g48aNS0s6JTZd9omJPO79V5w3kcfVePn60rEY+kvRJM8CPgZcWlUPz109z13qpxZU7aiqzVW1eWZmZmlJJUmLGqrQk6ymV+Y3VNXN8wyZBTb0za8HHjz2eJKkYQ1zlkuAa4EDVfXeBYbtBC7sznY5HThSVYcWGCtJWgHDHEN/OfB64O4kd3bL3g5sBKiq7cAu4FzgIPAYcPHoo0qSFjOw0Kvqi8x/jLx/TAFvHFUoSdLSeaWoJDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDViYKEnuS7JQ0nuWWD9mUmOJLmzu10++piSpEFWDTHmg8DVwPWLjPlCVZ0/kkSSpGUZuIdeVZ8HvjeGLJKkYzCqY+hnJLkrya1JXrTQoCTbkuxOsvvw4cMjemhJEoym0PcCJ1XVi4H3AbcsNLCqdlTV5qraPDMzM4KHliQ97pgLvaoerqpHu+ldwOoka485mSRpSY650JOckCTd9JZum9891u1KkpZm4FkuSW4EzgTWJpkF3gmsBqiq7cBrgEuSHAV+AFxQVbViiSVJ8xpY6FX12gHrr6Z3WqMkaYK8UlSSGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjBhZ6kuuSPJTkngXWJ8lVSQ4m2ZfktNHHlCQNMswe+geBsxdZfw5wSnfbBlxz7LEkSUs1sNCr6vPA9xYZshW4vnpuA9YkOXFUASVJw1k1gm2sAx7om5/tlh2aOzDJNnp78WzcuHEED/3/x6bLPjHpCGN3/xXnTTqCGjbJ99RKvbZH8aVo5llW8w2sqh1VtbmqNs/MzIzgoSVJjxtFoc8CG/rm1wMPjmC7kqQlGEWh7wQu7M52OR04UlU/dbhFkrSyBh5DT3IjcCawNsks8E5gNUBVbQd2AecCB4HHgItXKqwkaWEDC72qXjtgfQFvHFkiSdKyeKWoJDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDViqEJPcnaS+5IcTHLZPOvPTHIkyZ3d7fLRR5UkLWbVoAFJjgPeD/w2MAt8KcnOqrp3ztAvVNX5K5BRkjSEYfbQtwAHq+prVfUj4CZg68rGkiQt1TCFvg54oG9+tls21xlJ7kpya5IXzbehJNuS7E6y+/Dhw8uIK0layDCFnnmW1Zz5vcBJVfVi4H3ALfNtqKp2VNXmqto8MzOztKSSpEUNU+izwIa++fXAg/0Dqurhqnq0m94FrE6ydmQpJUkDDVPoXwJOSXJykuOBC4Cd/QOSnJAk3fSWbrvfHXVYSdLCBp7lUlVHk7wJ+CRwHHBdVe1P8oZu/XbgNcAlSY4CPwAuqKq5h2UkSStoYKHDTw6j7JqzbHvf9NXA1aONJklaCq8UlaRGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1IihCj3J2UnuS3IwyWXzrE+Sq7r1+5KcNvqokqTFDCz0JMcB7wfOAV4IvDbJC+cMOwc4pbttA64ZcU5J0gDD7KFvAQ5W1deq6kfATcDWOWO2AtdXz23AmiQnjjirJGkRq4YYsw54oG9+FnjZEGPWAYf6ByXZRm8PHuDRJPfN83hrge8MkWsSzLY8y8qWK1cgyfyae+6WapnP9TQ/bzDF+XLlMWU7aaEVwxR65llWyxhDVe0Adiz6YMnuqto8RK6xM9vyTHM2mO58Zlu+ac63UtmGOeQyC2zom18PPLiMMZKkFTRMoX8JOCXJyUmOBy4Ads4ZsxO4sDvb5XTgSFUdmrshSdLKGXjIpaqOJnkT8EngOOC6qtqf5A3d+u3ALuBc4CDwGHDxMWRa9JDMhJlteaY5G0x3PrMt3zTnW5FsqfqpQ92SpCchrxSVpEZY6JLUiLEXepLjkvx7ko93889L8ukkX+n+Prdv7Nu6nxO4L8nvjiHbmiQfTfLlJAeSnDEt+ZK8Jcn+JPckuTHJ0yaZLcl1SR5Kck/fsiXnSfLSJHd3665KMt8psKPI9p7u33Vfkn9MsmZasvWt+7MklWTtJLItli/Jn3QZ9id59yTyLfDv+pIktyW5M8nuJFsmlG1Dks92vbE/yZu75eN9T1TVWG/AnwJ/D3y8m383cFk3fRlwZTf9QuAu4KnAycBXgeNWONuHgD/upo8H1kxDPnoXaX0deHo3/xHgDyaZDfgN4DTgnr5lS84D3AGcQe9ahluBc1Yo2+8Aq7rpK6cpW7d8A70TD74BrJ1EtkWeu98C/hl4ajf//Gl57oBPPb5teidmfG5C2U4ETuumnw38R5dhrO+Jse6hJ1kPnAd8oG/xVnpFSvf39/qW31RVP6yqr9M7g2YLKyTJc+i9YK4FqKofVdX3pyUfvTOSnp5kFfAMeuf5TyxbVX0e+N6cxUvKk97PQzynqv6teq/k6/vuM9JsVfWpqjrazd5G71qJqcjW+WvgL/i/F+SNNdsi+S4BrqiqH3ZjHppEvgWyFfCcbvpneOL6l3FnO1RVe7vpR4AD9HbExvqeGPchl7+h96L9n75lP1fdOevd3+d3yxf6OYGV8gvAYeBv0zsk9IEkz5yGfFX1LeCvgG/S+zmFI1X1qWnINsdS86zrpsed8w/p7flMRbYkrwa+VVV3zVk18WydFwC/nuT2JP+a5FenKN+lwHuSPEDvPfK2SWdLsgk4FbidMb8nxlboSc4HHqqqPcPeZZ5lK3mO5Sp6H+euqapTgf+i9xFpIWPL1x1320rvo9nPA89M8rppyDakhfKMPWeSdwBHgRseX7RAhrFkS/IM4B3A5fOtXiDDJN4bzwVOB/4c+Eh3XHca8l0CvKWqNgBvofuEPalsSZ4FfAy4tKoeXmzoAjmOKd8499BfDrw6yf30frHxrCQfBv6z+5hB9/fxj3Pj/jmBWWC2qm7v5j9Kr+CnId+rgK9X1eGq+jFwM/BrU5Kt31LzzPLEoY8Vz5nkIuB84Pe7j7PTkO0X6f2P+q7uvbEe2JvkhCnI9rhZ4ObquYPeJ+y1U5LvInrvB4B/4IlDi2PPlmQ1vTK/oaoezzTW98TYCr2q3lZV66tqE72fD/iXqnodvZ8NuKgbdhHwT930TuCCJE9NcjK931q/YwXzfRt4IMkvd4teCdw7Jfm+CZye5BndntEr6R2jm4Zs/ZaUp/sI+kiS07v/rgv77jNSSc4G/hJ4dVU9NifzxLJV1d1V9fyq2tS9N2bpfbn27Uln63MLcBZAkhfQO2HgO1OS70HgN7vps4CvdNNjzdZt61rgQFW9t2/VeN8Tx/rt7nJuwJk8cZbLzwKfofcP8RngeX3j3kHv29/7GNG3+ANyvQTYDeyj9yJ+7rTkA94FfBm4B/g7et+OTywbcCO94/k/pldCf7ScPMDm7r/pq8DVdFcvr0C2g/SOWd7Z3bZPS7Y56++nO8tl3NkWee6OBz7cPd5e4Kxpee6AVwB76J0xcjvw0gllewW9QyP7+l5j5477PeGl/5LUCK8UlaRGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpEf8Lfa3/QJTaB88AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(X[2])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "M57-Pzl_f_rF"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0 2.8284271247461903\n"
     ]
    }
   ],
   "source": [
    "X_st = X.copy().astype(np.float64)\n",
    "X1_mean = X[1].mean()\n",
    "X1_std = X[1].std()\n",
    "print(X1_mean, X1_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 294
    },
    "colab_type": "code",
    "id": "btJMY0YbgKLb",
    "outputId": "40010205-def9-4582-9a5d-e513e85b7a4e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n",
       "         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n",
       "         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n",
       "         1.00000000e+00],\n",
       "       [-7.07106781e-01, -7.07106781e-01, -3.53553391e-01,\n",
       "         7.07106781e-01,  0.00000000e+00, -1.06066017e+00,\n",
       "         7.07106781e-01,  2.47487373e+00, -7.07106781e-01,\n",
       "        -3.53553391e-01],\n",
       "       [ 5.00000000e+02,  7.00000000e+02,  7.50000000e+02,\n",
       "         6.00000000e+02,  1.45000000e+03,  8.00000000e+02,\n",
       "         1.50000000e+03,  2.00000000e+03,  4.50000000e+02,\n",
       "         1.00000000e+03],\n",
       "       [ 1.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n",
       "         1.00000000e+00,  2.00000000e+00,  1.00000000e+00,\n",
       "         3.00000000e+00,  3.00000000e+00,  1.00000000e+00,\n",
       "         2.00000000e+00]])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_st[1] = (X[1] - X1_mean) / X1_std\n",
    "X_st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 352
    },
    "colab_type": "code",
    "id": "-Y1tzWGCgYjA",
    "outputId": "89dc21fe-180f-4e68-f30f-1cf276c4f154"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWoAAAD4CAYAAADFAawfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAALZklEQVR4nO3df6j2d13H8de7bVLowGxHXW63d4FIKyjHYVkLsSGiW2T9EShU/iHcCAkKQSyCoP9mf0gEBd2kZGRKoCvxR7rKIUKu7q1tbt2aP7gj2fCeSer+sabv/jjXvd3ennNf39td1znvbY8HHM51zvXd97z3Oed+7nu+1/d7r7o7AMz1A0c9AAAXJ9QAwwk1wHBCDTCcUAMMd/k2dnrVVVf18ePHt7FrgKelu++++6vdvbPfc1sJ9fHjx3Pq1Klt7Brgaamq/vOg55z6ABhOqAGGE2qA4YQaYDihBhhOqAGGW3R5XlWdSfLNJN9O8lh3725zKACecCnXUf9id391a5MAsC+nPgCGW3pE3Uk+XlWd5M+6++SFG1TViSQnkuTYsWObm/CQHL/1w0f2tc/cdsuRfW1gvqVH1Dd29/VJXpvkt6rqFRdu0N0nu3u3u3d3dva9XR2A78OiUHf3Q6v3Z5PcnuSGbQ4FwBPWhrqqnl1VV557nOTVSR7Y9mAA7FlyjvoFSW6vqnPb/3V3//1WpwLgcWtD3d1fSvLThzALAPtweR7AcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDLQ51VV1WVf9WVR/a5kAAfLdLOaJ+a5LT2xoEgP0tCnVVXZPkliR/vt1xALjQ0iPqP0ryO0m+c9AGVXWiqk5V1alHHnlkI8MBsCDUVfVLSc52990X2667T3b3bnfv7uzsbGxAgGe6JUfUNyb55ao6k+R9SW6qqr/a6lQAPG5tqLv7d7v7mu4+nuT1Sf6pu39965MBkMR11ADjXX4pG3f3nUnu3MokAOzLETXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDCTXAcEINMJxQAwwn1ADDrQ11Vf1gVf1LVd1XVQ9W1R8cxmAA7Ll8wTbfSnJTdz9aVVck+VRVfbS7P73l2QDIglB3dyd5dPXhFau33uZQADxh0Tnqqrqsqu5NcjbJHd1913bHAuCcRaHu7m93988kuSbJDVX1UxduU1UnqupUVZ165JFHNj0nwDPWJV310d3/k+TOJK/Z57mT3b3b3bs7OzsbGg+AJVd97FTVc1ePfyjJq5J8dtuDAbBnyVUfVyd5d1Vdlr2w/013f2i7YwFwzpKrPu5P8rJDmAWAfbgzEWA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmC4taGuqmur6hNVdbqqHqyqtx7GYADsuXzBNo8l+e3uvqeqrkxyd1Xd0d3/vuXZAMiCI+rufri771k9/maS00letO3BANiz5Ij6cVV1PMnLkty1z3MnkpxIkmPHjm1gNJ7Ojt/64SP5umduu+VIvi48GYtfTKyq5yR5f5K3dfc3Lny+u09292537+7s7GxyRoBntEWhrqorshfp93T3B7Y7EgDnW3LVRyV5Z5LT3f2O7Y8EwPmWHFHfmOQ3ktxUVfeu3m7e8lwArKx9MbG7P5WkDmEWAPbhzkSA4YQaYDihBhhOqAGGE2qA4YQaYDihBhhOqAGGE2qA4YQaYDihBhhOqAGGE2qA4YQaYDihBhhOqAGGE2qA4YQaYDihBhhOqAGGE2qA4YQaYDihBhhOqAGGE2qA4YQaYDihBhhOqAGGE2qA4YQaYDihBhhOqAGGWxvqqnpXVZ2tqgcOYyAAvtuSI+q/SPKaLc8BwAHWhrq7P5nka4cwCwD7uHxTO6qqE0lOJMmxY8e+7/0cv/XDmxrpKeOo/p3P3HbLkXxd2Lan25+pjb2Y2N0nu3u3u3d3dnY2tVuAZzxXfQAMJ9QAwy25PO+9Sf45yUur6stV9abtjwXAOWtfTOzuNxzGIADsz6kPgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOGEGmA4oQYYTqgBhhNqgOEWhbqqXlNVn6uqL1TVrdseCoAnrA11VV2W5E+SvDbJdUneUFXXbXswAPYsOaK+IckXuvtL3f2/Sd6X5HXbHQuAcy5fsM2LkvzXeR9/OcnPXrhRVZ1IcmL14aNV9bknP97jrkry1Q3ub5ueMrPW2586s2ZD61pv38Ak6z3j1vWQjJ/1vJ+v72fWFx/0xJJQ1z6f6+/5RPfJJCcvYajFqupUd+9uY9+bZtbtMOt2mHU7Nj3rklMfX05y7XkfX5PkoU0NAMDFLQn1vyZ5SVX9WFU9K8nrk3xwu2MBcM7aUx/d/VhVvSXJx5JcluRd3f3g1if7bls5pbIlZt0Os26HWbdjo7NW9/ecbgZgEHcmAgwn1ADDjQx1Vf1aVT1YVd+pqgMvcZlwa3tVPa+q7qiqz6/e//AB252pqs9U1b1VdeqQZ7zoOtWeP149f39VXX+Y810wy7pZX1lVX1+t471V9ftHNOe7qupsVT1wwPOT1nTdrCPWdDXLtVX1iao6vWrAW/fZZsTaLpx1M2vb3ePekvxEkpcmuTPJ7gHbXJbki0l+PMmzktyX5LojmPUPk9y6enxrkrcfsN2ZJFcdwXxr1ynJzUk+mr1r5l+e5K4j+r4vmfWVST50FPNdMMcrklyf5IEDnh+xpgtnHbGmq1muTnL96vGVSf5j8M/rklk3srYjj6i7+3R3r7uzccqt7a9L8u7V43cn+ZUjmOFilqzT65L8Ze/5dJLnVtXVhz1o5nxP1+ruTyb52kU2mbKmS2Ydo7sf7u57Vo+/meR09u6OPt+ItV0460aMDPVC+93avpVFWuMF3f1wsveNS/L8A7brJB+vqrtXt9sfliXrNGUtl87xc1V1X1V9tKp+8nBGu2RT1nSpcWtaVceTvCzJXRc8NW5tLzJrsoG1XXIL+VZU1T8keeE+T/1ed//dkl3s87mtXGt4sVkvYTc3dvdDVfX8JHdU1WdXRzrbtmSdDm0t11gyxz1JXtzdj1bVzUn+NslLtj7ZpZuypkuMW9Oqek6S9yd5W3d/48Kn9/lHjmxt18y6kbU9slB396ue5C4O7db2i81aVV+pqqu7++HVr19nD9jHQ6v3Z6vq9uz9mn8YoV6yTlP+moC1c5z/B6G7P1JVf1pVV3X3tL+sZ8qarjVtTavqiuyF7z3d/YF9Nhmztutm3dTaPpVPfUy5tf2DSd64evzGJN/z20BVPbuqrjz3OMmrk+z7CvwWLFmnDyb5zdWr6S9P8vVzp3MO2dpZq+qFVVWrxzdk72f4vw990vWmrOlak9Z0Ncc7k5zu7nccsNmItV0y68bW9iheLV3wauqvZu+/mt9K8pUkH1t9/keTfOS87W7O3iutX8zeKZOjmPVHkvxjks+v3j/vwlmzdxXDfau3Bw971v3WKcmbk7x59biy9z+H+GKSz+SAK22GzPqW1Rrel+TTSX7+iOZ8b5KHk/zf6mf1TYPXdN2sI9Z0NcsvZO80xv1J7l293TxxbRfOupG1dQs5wHBP5VMfAM8IQg0wnFADDCfUAMMJNcBwQg0wnFADDPf/Oxm0kGVOrsYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(X_st[1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ZlJUBOyzgkJV"
   },
   "outputs": [],
   "source": [
    "def calc_std_fit(x):\n",
    "    res = (x - x.mean()) / x.std()\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'sklearn' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-66-f35acc9d62d2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mStandartScaler\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#Стандартизайия\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mMinMaxScaler\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#Нормализация\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'sklearn' is not defined"
     ]
    }
   ],
   "source": [
    "sklearn.StandartScaler() #Стандартизайия\n",
    "sklearn.MinMaxScaler() #Нормализация"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6PlDlFY0hGZA"
   },
   "outputs": [],
   "source": [
    "X_st[2] = calc_std_fit(X[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 155
    },
    "colab_type": "code",
    "id": "LOKhmhJjt9TR",
    "outputId": "2b131d78-9066-462b-dfa9-778758f3d363"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
       "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ],\n",
       "       [-0.70710678, -0.70710678, -0.35355339,  0.70710678,  0.        ,\n",
       "        -1.06066017,  0.70710678,  2.47487373, -0.70710678, -0.35355339],\n",
       "       [-0.97958969, -0.56713087, -0.46401617, -0.77336028,  0.97958969,\n",
       "        -0.36090146,  1.08270439,  2.11385144, -1.08270439,  0.05155735],\n",
       "       [-0.89625816, -0.89625816,  0.38411064, -0.89625816,  0.38411064,\n",
       "        -0.89625816,  1.66447944,  1.66447944, -0.89625816,  0.38411064]])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_st[3] = calc_std_fit(X[3])\n",
    "X_st"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "UdGy9tjVhZol"
   },
   "source": [
    "SGD (Stochastic gradient descent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VDpN7UxYnrcS"
   },
   "outputs": [],
   "source": [
    "def calc_mse(y, y_pred):\n",
    "    err = np.mean((y - y_pred)**2)\n",
    "    return err"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.46947439,  0.54256004, -0.46341769, -0.46572975])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W = np.random.randn(X.shape[0])\n",
    "W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "SgEyis2zlJeb"
   },
   "outputs": [],
   "source": [
    "# классический  GD\n",
    "def eval_model(X, y, iterations, alpha=1e-4):\n",
    "    W = np.random.randn(X.shape[0])\n",
    "    n = X.shape[1]\n",
    "    for i in range(1, iterations+1):\n",
    "        y_pred = np.dot(W, X)\n",
    "        err = calc_mse(y, y_pred)\n",
    "        W -= (alpha * (1/n * 2 * np.dot((y_pred - y), X.T)))\n",
    "        if i % (iterations / 10) == 0:\n",
    "            print(i, W, err)\n",
    "    return W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 207
    },
    "colab_type": "code",
    "id": "4nsYMAGjmFlB",
    "outputId": "8959a8af-3d27-42a6-afae-5db46c794fe1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 [49.03908402  4.45941572  2.93781327  4.88075199] 85.05680709968587\n",
      "200 [55.51053664  5.13905758  2.2508564   5.01361705] 27.14001430224078\n",
      "300 [56.36877781  5.530022    1.71386029  5.19069587] 25.658584668565815\n",
      "400 [56.48259737  5.76987481  1.30075179  5.38467597] 25.372108282815773\n",
      "500 [56.49769207  5.92193775  0.97764957  5.5702456 ] 25.208385289701567\n",
      "600 [56.49969392  6.02191404  0.72180009  5.73666   ] 25.104434542778694\n",
      "700 [56.49995941  6.09017849  0.51739683  5.88067239] 25.036776739226703\n",
      "800 [56.49999462  6.13852318  0.35306788  6.00267803] 24.992248868218248\n",
      "900 [56.49999929  6.17390265  0.22037815  6.1046777 ] 24.96279132382202\n",
      "1000 [56.49999991  6.20051923  0.11291237  6.18922868] 24.943256797793122\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([56.49999991,  6.20051923,  0.11291237,  6.18922868])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eval_model(X_st, y, iterations=1000, alpha=1e-2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# стохастический GS\n",
    "def eval_sgd_model(X, y, iterations, qty_in_batch, alpha=1e-4):\n",
    "    W = np.random.randn(X.shape[0])\n",
    "    n = X.shape[1]\n",
    "    n_batch = n // qty_in_batch\n",
    "    \n",
    "    if n % qty_in_batch != 0:\n",
    "        n_batch += 1\n",
    "        \n",
    "    for i in range(1, iterations+1):\n",
    "        for b in range(n_batch):\n",
    "            start_ = qty_in_batch*b\n",
    "            end_ = qty_in_batch*(b+1)\n",
    "#             print(b, n_batch, start_, end_)\n",
    "            X_tmp = X[:, start_ : end_]\n",
    "            y_tmp = y[start_ : end_]\n",
    "\n",
    "            y_pred_tmp = np.dot(W, X_tmp)\n",
    "            err = calc_mse(y_tmp, y_pred_tmp)\n",
    "\n",
    "            W -= (alpha * (1/n * 2 * np.dot((y_pred_tmp - y_tmp), X_tmp.T)))\n",
    "        \n",
    "        if i % (iterations / 10) == 0:\n",
    "            print(i, W, err)\n",
    "    return W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 207
    },
    "colab_type": "code",
    "id": "2aXap4Vsm3GV",
    "outputId": "8b666b76-9d01-4b6d-813c-f1d3f5901f5f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5000 [56.51062031  6.31269095 -0.36443782  6.58449895] 11.289383240271924\n",
      "10000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.28918200663471\n",
      "15000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n",
      "20000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n",
      "25000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n",
      "30000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n",
      "35000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n",
      "40000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n",
      "45000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n",
      "50000 [56.51062035  6.31272262 -0.3645908   6.58462533] 11.289181999330403\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([56.51062035,  6.31272262, -0.3645908 ,  6.58462533])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eval_sgd_model(X_st, y, iterations=50000, qty_in_batch=4, alpha=1e-2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "DYTxT_6OrZpe"
   },
   "source": [
    "L1 регуляризация"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Ojkn7xKrsyiw"
   },
   "source": [
    "f(x, W) + (lambda_) * np.sum(np.abs(W))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "j38vId7Hvtg0"
   },
   "source": [
    "L2 регуляризация"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lambda = lambda_/2"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KO5BtZ7svv4k"
   },
   "source": [
    "Производная\n",
    "f'(x, W) + (lambda_)* np.sum(W)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7AVoe1Mswjni"
   },
   "outputs": [],
   "source": [
    "def eval_model_reg2(X, y, iterations, alpha=1e-4, lambda_=1e-8):\n",
    "    np.random.seed(42)\n",
    "    W = np.random.randn(X.shape[0])\n",
    "    n = X.shape[1]\n",
    "    for i in range(1, iterations+1):\n",
    "        y_pred = np.dot(W, X)\n",
    "        err_m= calc_mse(y, y_pred)\n",
    "        W -= alpha * (1/n * 2 * np.dot((y_pred - y), X.T) + lambda_ * W) \n",
    "#         if i % (iterations / 10) == 0:\n",
    "#             print(i, W, err)\n",
    "    return W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 207
    },
    "colab_type": "code",
    "id": "vLJL6j8Lw6OA",
    "outputId": "dac9ef42-5966-4404-9346-aeb18cca83c6"
   },
   "outputs": [],
   "source": [
    "W = eval_model_reg2(X_st, y, iterations=5000, alpha=1e-2, lambda_=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([56.49717514,  6.30231751, -0.35424091,  6.56978425])"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 207
    },
    "colab_type": "code",
    "id": "4nsYMAGjmFlB",
    "outputId": "8959a8af-3d27-42a6-afae-5db46c794fe1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500 [56.49767254  5.83477719  1.36781865  5.25424451] 25.413829625514786\n",
      "1000 [56.4999999   6.17124081  0.25269258  6.07416416] 24.969784391475397\n",
      "1500 [56.5         6.2575128  -0.13774522  6.39128671] 24.913059475565493\n",
      "2000 [56.5         6.28678323 -0.27772011  6.50655795] 24.905712417850083\n",
      "2500 [56.5         6.29722767 -0.32807425  6.54810646] 24.904760553791704\n",
      "3000 [56.5         6.30098239 -0.34619733  6.56306445] 24.904637232271696\n",
      "3500 [56.5         6.30233363 -0.3527205   6.5684486 ] 24.904621254991206\n",
      "4000 [56.5         6.30281999 -0.35506846  6.57038658] 24.904619185007867\n",
      "4500 [56.5         6.30299505 -0.35591359  6.57108415] 24.904618916825108\n",
      "5000 [56.5         6.30305806 -0.35621778  6.57133523] 24.90461888207993\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([56.5       ,  6.30305806, -0.35621778,  6.57133523])"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eval_model(X_st, y, iterations=5000, alpha=1e-2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Д/з"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Постройте график зависимости весов всех признаков от lambda в L2-регуляризации (на данных из урока). Сделайте вывод"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2577ff55cd0>]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lambda_ = np.linspace(0, 25, 50)\n",
    "w1=[]\n",
    "w2=[]\n",
    "w3=[]\n",
    "w4=[]\n",
    "for elements in lambda_:\n",
    "    L= eval_model_reg2(X_st, y, 5000, 1e-2, elements)\n",
    "    w1.append(L[0])\n",
    "    w2.append(L[1])\n",
    "    w3.append(L[2])\n",
    "    w4.append(L[3])\n",
    "plt.xlabel('lambda')\n",
    "plt.ylabel('w')\n",
    "plt.plot(lambda_,w1,color='g')\n",
    "plt.plot(lambda_,w2,color='r')\n",
    "plt.plot(lambda_,w3,color='b')\n",
    "plt.plot(lambda_,w4,color='y')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "при стремлении lambda к бесконечности признаки стремятся к нулю"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Можно ли к одному и тому же признаку применить сразу и нормализацию, и стандартизацию?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Нет, так как они друг друга взаимоисключают/взаимозаменяют(приводят к диапазону [0,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Напишите функцию наподобие eval_model_reg2, но для применения L1-регуляризации."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([56.49717514,  6.30237966, -0.3544543 ,  6.56992934])"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def eval_model_reg1(X, y, iterations, alpha=1e-4, lambda_=1e-8):\n",
    "    np.random.seed(42)\n",
    "    W = np.random.randn(X.shape[0])\n",
    "    n = X.shape[1]\n",
    "    for i in range(1, iterations+1):\n",
    "        y_pred = np.dot(W, X)\n",
    "        err = calc_mse(y, y_pred)\n",
    "        W -= alpha * (1/n * 2 * np.dot((y_pred - y), X.T) + lambda_ * abs(W))\n",
    "#         if i % (iterations / 10) == 0:\n",
    "#             print(i, W, err)\n",
    "    return W\n",
    "W1 = eval_model_reg1(X_st, y, iterations=5000, alpha=1e-2, lambda_=1e-4)\n",
    "W1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Lesson2.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
